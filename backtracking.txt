***************    BACKTRACKING    ****************

1. find all Combinations of n number upto k

class Solution {
    
    void findCombinations(vector<vector<int>>& res, int start, int index, vector<int>& store,int n, int k){
        if(index==k){
            res.push_back(store);
            return ;
        }
        for(int i=start;i<n;i++){
            store.push_back(i+1);
            findCombinations(res,i+1,index+1,store,n,k);
            store.pop_back();
        }
    }
    
public:
    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>> res;
        vector<int> store;
        findCombinations(res,0,0,store,n,k);
        return res;
    }
};

2. n-queens problem

class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string> > res;
        
        vector<string> Queens(n,string(n,'.'));  // queens
        
        solve(res,Queens,0,n);
        
        return res;
    }
private:
    void solve(vector<vector<string> >& res, vector<string>& Queens, int row, int n){
        if(row==n){
            res.push_back(Queens);
            return ;
        }
        for(int col=0;col<n;col++){
            if(isValid(Queens,row,col,n)){
                Queens[row][col]='Q';
                solve(res,Queens,row+1,n);
                Queens[row][col]='.';
            }
        }
    }
    
    bool isValid(vector<string>& Queens, int row, int col, int n){
        
        for(int i=0;i<row;i++){            //  taking column
            if(Queens[i][col]=='Q')
                return false;
        }
        for(int i=row-1,j=col-1;i>=0 and j>=0;i--,j--){         // taking 135'
            if(Queens[i][j]=='Q')
                return false;
        }
        for(int i=row-1,j=col+1;i>=0 and j<n;j++,i--){          // taking 45'
            if(Queens[i][j]=='Q')
                return false;
        }
        return true;
    }
};

3. Sudoko solver

class Solution {
    
    bool isSafe(vector<vector<char>>& board, int i, int j, char ch){
        
        // check j-th column
        for(int k=0;k<9;k++)
            if(board[k][j]==ch)
                return false;
        
        // check i-th row
        for(int k=0;k<9;k++){
            if(board[i][k]==ch)
                return false;
        }
        
        // check 3*3 grid
        int row = (i/3)*3;
        int col = (j/3)*3;
        for(int k=row;k<row+3;k++){
            for(int l = col;l<col+3;l++){
                if(board[k][l]==ch)
                    return false;
            }
        }
        
        // else return true
        return true;
    }
    
    bool sudokoSolver(vector<vector<char>>& board, int i, int j){
        
        cout<<i<<" "<<j<<endl;
        // if reach end of row 9
        if(i==9 )
            return true;
        
        // if reach out of boundary
        if(j==9)
            return sudokoSolver(board,i+1,0);
        
        // if cell is already filled
        if(board[i][j]!='.')
            return sudokoSolver(board,i,j+1);
                
        // if not filled check the cell and filled
        for(char ch = '1'; ch<='9';ch++){
            if(isSafe(board,i,j,ch)){
                board[i][j]=ch;
                if(sudokoSolver(board,i,j+1))
                    return true;
            }
        }
        board[i][j]='.';
        return false;
    }
    
public:
    void solveSudoku(vector<vector<char>>& board) {
        sudokoSolver(board,0,0);   
    }
};

4. Permutations of array

class Solution {
    vector<vector<int>> res;
    
    void dfs(vector<int>& nums, int i){
        
        if(i==nums.size()-1){
            res.push_back(nums);
            return ;
        }
        
        for(int j=i;j<nums.size();j++){
            swap(nums[j],nums[i]);
            dfs(nums,j+1);
            swap(nums[j],nums[i]);
        }
    }
    
public:
    vector<vector<int>> permute(vector<int>& nums) {
        dfs(nums,0);
        return res;
    }
};

5. Word Ladder  (BFS + Backtracking)

class Solution {
public:
    int ladderLength(string begin, string end, vector<string>& list) {
        int f=0;
        for(auto x:list){
            if(end==x)
                f=1;
        }
        if(!f)
            return 0;
        if(end==begin)
            return 0;
        queue<string> q;
        q.push(begin);
        int cnt=0;
        int n = list.size();
        unordered_map<string,int> vis;
        unordered_set<string>  mark_unvis;
        for(auto x:list)
            mark_unvis.insert(x);
        while(!q.empty()){
            int sz = q.size();
            cnt++;
            while(sz--){
                string front = q.front();
                q.pop();
                // cout<<front<<" ";
                if(front==end)
                    return cnt;
                for(int i=0;i<front.length();i++){
                    string item = front;
                    for(char x = 'a'; x <= 'z'; x++){
                        item[i]=x;
                        if(mark_unvis.find(item)!=mark_unvis.end()){
                            q.push(item);
                            mark_unvis.erase(item);
                        }
                    }
                }
            }
        }
        return 0;
    }
};