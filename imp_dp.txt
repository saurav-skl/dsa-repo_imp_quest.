*********************************** DYNAMIC PROGRAMMING *************************************


1. 0-1 knapsack
2. Unbounded knapsack
3. Fibonacci
4. LCS(Longest Common Subsequences)
5. LIS(Longest Increasing Subsequences)
6. Kadane's Algorithm
7. Matrix Chain Multiplications
8. DP on Trees 
9. DP on Grid
10. Others


Lcs variations 

Maximum length of repeated Subarray


class Solution {
public:
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size(), m = nums2.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1));
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(nums1[i-1]==nums2[j-1])
                    dp[i][j] = dp[i-1][j-1]+1;
                else 
                    dp[i][j] = 0;
            }
        }
        int mx = 0;
        for(int i=0;i<=n;i++){
            for(int j=0;j<=m;j++)
                mx = max(dp[i][j],mx);
        }
        return mx;
    }
};


Matrix Chain Multiplications

1. Palindromic Substrings(Count)

class Solution {
public:
    int countSubstrings(string s) {
        int n = s.length();
        int cnt=0;
        vector<vector<bool>> dp(n,vector<bool>(n,false));
        for(int i=0;i<n;i++){            // maintain gaps 
            for(int j=i,k=0;j<n;j++,k++){
                if(i==0)
                    dp[k][j]=true;
                else if(i==1 ){
                    dp[k][j] = s[j]==s[k];
                } else {
                    if(dp[k+1][j-1] and s[j]==s[k])
                        dp[k][j]=true;
                    else 
                        dp[k][j]=false;
                }
                if(dp[k][j])
                    cnt++;
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++)
                cout<<dp[i][j]<<" ";
            cout<<endl;
        }
        return cnt;
    }
};

2. Longest Palindromic Substring 

class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.length();
        if(n==1)
            return s;
        int start=0, end=0, ans=1;
        vector<vector<bool>> dp(n, vector<bool>(n,false));
        for(int i=0; i<n; i++){
            for(int j=i, k=0; j<n; j++, k++){
                if(i==0) dp[k][j] = true;
                else if(i==1) dp[k][j] = (s[j]==s[k]);
                else if(dp[k+1][j-1] and s[j]==s[k]) dp[k][j] = true;
                else dp[k][j] = false;
                
                if(dp[k][j] and ans<j-k+1){
                    start = k;
                    end = j;
                    ans = j-k+1;
                }
            }
        }
        string res;
        for(int i=start; i<=end; i++)
            res.push_back(s[i]);
        return res;
    }
};

