*********************************** DYNAMIC PROGRAMMING *************************************


1. 0-1 knapsack
2. Unbounded knapsack
3. Fibonacci
4. LCS(Longest Common Subsequences)
5. LIS(Longest Increasing Subsequences)
6. Kadane's Algorithm
7. Matrix Chain Multiplications
8. DP on Trees 
9. DP on Grid
10. Others


Lcs variations 

Maximum length of repeated Subarray


class Solution {
public:
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size(), m = nums2.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1));
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(nums1[i-1]==nums2[j-1])
                    dp[i][j] = dp[i-1][j-1]+1;
                else 
                    dp[i][j] = 0;
            }
        }
        int mx = 0;
        for(int i=0;i<=n;i++){
            for(int j=0;j<=m;j++)
                mx = max(dp[i][j],mx);
        }
        return mx;
    }
};


