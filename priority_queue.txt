1. Find K Closest Elements

class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        priority_queue<int,vector<int>,greater<int>> pq;
        for(int i=0;i<k;i++)
            pq.push(arr[i]);
        int n = arr.size();
        for(int i=k;i<n;i++){
            if(abs(pq.top()-x)==abs(arr[i]-x)){
                if(arr[i]<pq.top()){
                    pq.pop();
                    pq.push(arr[i]);
                }
            }
            else if(abs(arr[i]-x)<abs(pq.top()-x)){
                pq.pop();
                pq.push(arr[i]);
            }
        }
        vector<int> v;
        while(!(pq.empty())){
            v.push_back(pq.top());
            pq.pop();
        }
        return v;
    }
};


2. Flood Fill

class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        if (image[sr][sc] != newColor)
            dfs(image, sr, sc, image[sr][sc], newColor);
        return image;
    }

private:
    void dfs(vector<vector<int>>& image, int i, int j, int c0, int c1) {
        if (i < 0 || j < 0 || i >= image.size() || j >= image[0].size() || image[i][j] != c0) return;
        image[i][j] = c1;
        dfs(image, i, j - 1, c0, c1);
        dfs(image, i, j + 1, c0, c1);
        dfs(image, i - 1, j, c0, c1);
        dfs(image, i + 1, j, c0, c1);
    }
};