
1. Sort an array of 0’s 1’s 2’s without using extra space or sorting algo

class Solution {
public:
    void sortColors(vector<int>& nums) {
        
        vector<int> a1,a2,a3,a;
        int n = nums.size(),one=0,zero=0,two=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0)
                zero++;
            else if(nums[i]==1)
                one++;
            else if(nums[i]==2)
                two++;
        }
        nums.clear();
        for(int i=0;i<zero;i++)
            nums.push_back(0);
        for(int i=0;i<one;i++)
            nums.push_back(1);
        for(int i=0;i<two;i++)
            nums.push_back(2);
        
    }
};


class Solution {
    public:
    void sortColors(vector<int>& nums) 
    {
        int tmp = 0, low = 0, mid = 0, high = nums.size() - 1;
    
        while(mid <= high)
        {
            if(nums[mid] == 0)
            {
                tmp = nums[low];
                nums[low] = nums[mid];
                nums[mid] = tmp;
                low++;
                mid++;
            }
            else if(nums[mid] == 1)
            {
                mid++;
            }
            else if(nums[mid] == 2)
            {
                tmp = nums[high];
                nums[high] = nums[mid];
                nums[mid] = tmp;
                high--;
            }
        }
    }
};

2. Repeat and Missing Number

(Missing Numbers)
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n = nums.size();
        int tot = (n*(n+1))/2,sum=0;
        for(auto x:nums)
            sum+=x;
        return tot-sum;
    }
};

3. Merge two sorted Arrays without extra space

void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
    int i=m-1,j=n-1,k=m+n-1;
    while(i>=0&&j>=0)
    {
        if(nums1[i]>nums2[j])
        {
            nums1[k]=nums1[i];
            i--;
            k--;
        }
        else
        {
            nums1[k]=nums2[j];
            j--;
            k--;
        }
    }
    while(i>=0)
        nums1[k--]=nums1[i--];
    while(j>=0)
        nums1[k--]=nums2[j--];
}

4. Kadane’s Algorithm 

5. Find the Duplicate Number

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n = nums.size(),res=0;
        for(int i=0;i<=30;i++){
            int bits = 1<<i,a=0, b=0;

            for(int j=0; j<n; j++){
                if(j>0 and j&bits) a++;
                if(nums[j]&bits) b++;
            }
            if(b>a) res+=bits;
        }
        return res;
    }
};


6. Set Matrix Zeroes

class Solution {
public:
    void setZeroes(vector<vector<int>>& mat) {
        queue<pair<int,int>> qp;
        int n = mat.size();
        int m = mat[0].size();
        if(mat.empty())
            return ;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==0)
                    qp.push({i,j});
            }
        }
        while(!qp.empty()){
            int x = qp.front().first,y = qp.front().second;
            qp.pop();
            for(int i=0;i<m;i++){
                mat[x][i]=0;
            }
            for(int i=0;i<n;i++){
                mat[i][y]=0;
            }
        }
    }
};


7. Pascals Triangle 

class Solution {
public:
    vector<vector> generate(int numRows) {
        vector<vector> pascals_triangle;

        for(int i=0; i<numRows;i++){
            vector<int> inner_sets;
            for(int j=0; j <= i;j++){
                
                if((j == 0) || (j == i)){
                    inner_sets.push_back(1);
                }
                else{
                    inner_sets.push_back(pascals_triangle[i-1][j-1]+pascals_triangle[i-1][j]);
                }
            }
            pascals_triangle.push_back(inner_sets);
        }
        return pascals_triangle;
    }
};


8. Next Permutation

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int i = nums.size() - 2;
        while (i >= 0 && nums[i + 1] <= nums[i]) {
            i--;
        }
        if (i >= 0) {
            int j = nums.size() - 1;
            while (j > 0 && nums[j] <= nums[i]) {
                j--;
            }
            swap(nums[i], nums[j]);
        }
        reverse(nums.begin() + i + 1, nums.end());
    }
};


9. Reverse Pairs or Count of Inverse Pairs or Inversion Of array

class Solution {
public:
    int reversePairs(vector<int>& nums) {
        int ans = countPairs(nums,0,nums.size()-1);
        return ans;
    }
    
    int countPairs(vector<int>& nums, int left, int right){
        int cnt=0;
        if(left<right){
            int mid = (right+left)/2;
            cnt+=countPairs(nums,left,mid);
            cnt+=countPairs(nums,mid+1,right);
            cnt+=mergePairs(nums,left,mid,right);
        }
        return cnt;
    }
    
    int mergePairs(vector<int>& nums, int left, int mid, int right){
        int i=left, j = mid+1, ans=0;
        while(i<=mid and j<=right){
            if((long)nums[i]>(long)2*nums[j]){
                ans+=mid-i+1;
                j++;
            } else{
                i++;
            }
        }
        int temp[right-left+10];
        i=left;j=mid+1;
        int k=0;
        while(i<=mid and j<=right){
            if(nums[i]>nums[j]){
                temp[k++]=nums[j++];
            } else{
                temp[k++]=nums[i++];
            }
        }
        
        while(i<=mid){
            temp[k++]=nums[i++];
        }
        
        while(j<=right){
            temp[k++]=nums[j++];
        }
        k=0;
        for(int i=left;i<=right;i++){
            nums[i]=temp[k++];
        }
        
        return ans;
    }
    
};

10.  Rotate Matrix

/*
 * clockwise rotate
 * first reverse up to down, then swap the symmetry 
 * 1 2 3     7 8 9     7 4 1
 * 4 5 6  => 4 5 6  => 8 5 2
 * 7 8 9     1 2 3     9 6 3
*/
void rotate(vector<vector<int> > &matrix) {
    reverse(matrix.begin(), matrix.end());
    for (int i = 0; i < matrix.size(); ++i) {
        for (int j = i + 1; j < matrix[i].size(); ++j)
            swap(matrix[i][j], matrix[j][i]);
    }
}

/*
 * anticlockwise rotate
 * first reverse left to right, then swap the symmetry
 * 1 2 3     3 2 1     3 6 9
 * 4 5 6  => 6 5 4  => 2 5 8
 * 7 8 9     9 8 7     1 4 7
*/

void anti_rotate(vector<vector<int> > &matrix) {
    for (auto vi : matrix) reverse(vi.begin(), vi.end());
    for (int i = 0; i < matrix.size(); ++i) {
        for (int j = i + 1; j < matrix[i].size(); ++j)
            swap(matrix[i][j], matrix[j][i]);
    }
}

11. Search in Matrix

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int C=matrix[0].size();
        int R=matrix.size();
        int i=0,j=C-1;
        bool res=false;
        while(j>=0 && i<R){
            if(matrix[i][j]==target)
            {   res=true;
                 break;
            }
            else if(matrix[i][j]>target){
                j--;
            }
            else{
                i++;
            }
        }
        return res;
    }
};

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& mat, int x) {

        int n = mat.size();
        int m = mat[0].size();
        if(n==0 or m==0 or mat.empty()==true)
            return false;
        int h = m*n-1,l=0;
        while(l<=h){
            int mid = h - (h-l)/2;
            int i = mid/m , j = mid%m;
            if(i<n and j<m and mat[i][j]==x){
                return true;
            }
            else if(i<n and j<m and mat[i][j]>x)
            {
                h = mid-1;
            }
            else {
                l = mid+1;
            }
        }
        return false;
            
    }
};


12. Power (X,n)

class Solution {
public:
    double myPow(double x, int y) {
        double res=1;
        bool sign=(y>=0);
        y=abs(y);
        while(y>0){
            if(y&1){
                res*=x;
            }
            y=y>>1;
            x=x*x;
        }
        if(sign)
            return res;
        return 1/res;
    }
};

13. Majority Element (>N/2 times) 

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count=0;
        int candidates = -1;
        for(int i=0;i<nums.size();i++){
            if(count==0)
                candidates = nums[i];
            count += (candidates==nums[i]) ? 1 : -1;
        }
        return candidates;
    }
};


14.  Unique Paths

class Solution {
public:
    int uniquePaths(int m, int n) {
    int arr[m][n];
    arr[0][0] = 1;
    for(int i=1; i<m; i++){
		arr[i][0]=1;
	}
    for(int j=1; j<n; j++){
		arr[0][j]=1;
	}
    for(int i=1; i<m; i++){
		for(int j=1; j<n; j++){
			arr[i][j] = (arr[i-1][j]+arr[i][j-1]);
		}
	}
	return arr[m-1][n-1];
    }   
};


15. Two Sum 


class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> res;
        int n = nums.size();
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(nums[i]+nums[j]==target){
                    res.push_back(i);
                    res.push_back(j);
                    return res;
                }
            }
        }
        return res;
    }
};


class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int,int> mp;
        int n = nums.size();
        
        for(int i=0;i<n;i++){
           int k = target - nums[i];
            if(mp.find(k)!=mp.end()){
                return {mp[k],i};
            }
            mp[nums[i]]=i;
        }
        vector<int> v;
        return v;
    }
};


16. Longest Consecutive Sequence/Subsequences

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        set<int> s;
        for(auto x:nums)
            s.insert(x);
        vector<int> arr;
        for(auto x:s)
            arr.push_back(x);
        int cnt=1,n=nums.size(),res=1;
        if(n==0)
            return 0;
        for(int i=1;i<arr.size();i++){
            if(arr[i-1]==arr[i]-1)
                cnt++;
            else 
                cnt=1;
            res = max(res,cnt);
        }
        return res;
    }
};

17.  Longest Substring Without Repeating Characters

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n = s.length();
        if(n==0 or n==1)
            return n;
        unordered_set<char> set;
        int j=0,res=0,i=0;
        while(i<n and j<n){
            if(set.find(s[i])==set.end()){
                set.insert(s[i++]);
                res = max(res,i-j);
            }
            else
                set.erase(s[j++]);
        }
        return res;
    }
};

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        map<char,int> mp;
        int start = -1,ans=0;
        
        for(int i=0;i<s.length();i++){
            if(mp.count(s[i]) != 0){
                start = max(mp[s[i]],start);
            }
            mp[s[i]]=i;
            ans = max(ans,i-start);
        }
        return ans;
    }
};


18. Reverse Linked List 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

// Recursive 
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(!head or !(head->next))
            return head;
        ListNode *node = reverseList(head->next);
        head->next->next = head;
        head->next = NULL;
        return node;
    }
};

// iterative 
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head==NULL or head->next==NULL)
            return head;
        ListNode *temp, *prev=NULL, *cur = head;
        while(cur!=NULL){
            temp = cur->next;
            cur->next = prev;
            prev = cur;
            cur = temp;
        }
        return prev;
    }
};


20. Middle of Linked List 

ListNode* middleNode(ListNode* head) {
    ListNode *slow = head, *fast = head;
    while (fast && fast->next)
        slow = slow->next, fast = fast->next->next;
    return slow;
}

21.  Merge Two Sorted Lists

class Solution {
    ListNode* merge(ListNode* l1, ListNode* l2){
        if(l1==NULL)
            return l2;
        if(l2==NULL)
            return l1;
        if(l1->val<l2->val){
            l1->next = merge(l1->next,l2);
            return l1;
        } else {
            l2->next = merge(l1,l2->next);
            return l2;
        }
    }
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode * head = merge(l1,l2);
        return head;
    }
};


22. Remove Nth Node From End of List

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        
        ListNode* cur = head;
        int sz=0;
        while(cur!=NULL){
            sz+=1;
            cur=cur->next;
        }
        int front = sz-n+1;
        if(front==1)
            return head->next;
        cur=head;
        int pos=0;
        ListNode* prev = NULL;
        while(cur!=NULL){
            pos+=1;
            if(pos==front){
                prev->next = cur->next;
            }
            prev = cur;
            cur = cur->next;
        }
        return head;
    }
};


23. Delete Node in a Linked List

class Solution {
public:
    void deleteNode(ListNode* node) {
        ListNode* temp = node->next;
        *node = *node->next;
        delete temp;
    }
};


24. Add Two numbers 

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *cur1=l1, *cur2=l2, *ans;
        ListNode *sum=NULL;
        int carry=0;
        while(cur1 or cur2 or carry){
            int temp=0;
            if(cur1){
                temp+=cur1->val;
                cur1 = cur1->next;
            }
            if(cur2){
                temp+=cur2->val;
                cur2 = cur2->next;
            }
            temp+=carry;
            carry = temp/10;
            ListNode *store = new ListNode();
            store->val = temp%10;
            if(sum==NULL){
                sum = store;
                ans = store;
            }
            else {
                sum->next = store;
                sum = sum->next;
            }
            
        }
        
        return ans;
    }
};


25. Intersection of Two Linked Lists

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
       ListNode *p1 = headA, *p2 = headB;
        if(p1==NULL or p2==NULL) return NULL;
        while(p1!=NULL and p2!=NULL and p1!=p2){
            p1=p1->next;
            p2=p2->next;
            if(p1==p2) return p1;
            if(p1==NULL) p1=headB;
            if(p2==NULL) p2=headA;
        }
        return p1;
    }
};


26. LinkedList Cycle

class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode *slow = head, *fast = head;
        while(fast and fast->next){
            slow = slow->next;
            fast = fast->next->next;
            if(slow==fast)
                return true;
        }
        return false;
    }
};

27. Reverse Nodes in k-Group

class Solution {
    ListNode* reverseKlist(ListNode* head, int k){
        int cnt=0;
        ListNode* cur = head;
        while(cur!=NULL){
            cnt+=1;
            cur = cur->next;
        }
        if(cnt<k)
            return head;
        ListNode* temp;
        ListNode* prev=NULL;
        cur = head;
        cnt=0;
        while(cur!=NULL and cnt<k){
            cnt++;
            temp = cur->next;
            cur->next = prev;
            prev = cur;
            cur = temp;
        }
        head->next = reverseKlist(temp,k);
        return prev;
    }
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==NULL or head->next==NULL or k==1)
            return head;
        int cnt=0;
        head = reverseKlist(head,k);
        return head;
    }
};


28. Check if a LinkedList is palindrome or not. 

class Solution {
    ListNode* reverseList(ListNode* head){
        ListNode *prev = NULL;
        ListNode *temp=NULL;
        ListNode *cur = head;
        while(cur!=NULL){
            temp = cur->next;
            cur->next = prev;
            prev = cur;
            cur = temp;
        }
        cur = prev;
        while(cur!=NULL){
            cout<<cur->val<<" ";
            cur = cur->next;
        }
        return prev;
    }
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL or head->next==NULL)
            return true;
        ListNode *slow=head, *fast=head;
        while(fast->next and fast->next->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        slow->next = reverseList(slow->next);
        slow = slow->next;
        ListNode *dummy = head;
        while(slow!=NULL){
            if(slow->val!=dummy->val)
                return false;
            slow = slow->next;
            dummy = dummy->next;
        }
        return true;
    }
    

29. Linked List Cycle II or Find the starting point of the Loop of LinkedList

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode *slow = head, *fast = head, *cur = head;
        while(fast and fast->next){
            slow = slow->next;
            fast = fast->next->next;
            if(slow==fast){
                while(cur!=slow){
                    cur = cur->next;
                    slow = slow->next;
                }
                return cur;
            }
        }
        return NULL;
    }
};

30. Rotate a LinkedList 

class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head==NULL or head->next==NULL)
            return head;
        int cnt=0;
        ListNode* cur = head;
        while(cur!=NULL){
            cnt++;
            cur=cur->next;
        }
        k=k%cnt;
        // k = 1;
        if(k==0)
            return head;
        cur = head;
        k=cnt-k;
        ListNode* prev=NULL;
        while(k>0){
            --k;
            prev = cur;
            cur = cur->next;
        }
        prev->next=NULL;
        ListNode* temp = head;
        head = cur;
        while(cur->next!=NULL){
            cur=cur->next;
        }
        cur->next = temp;
        return head;
    }
};

31.  3 sum

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        
        vector<vector<int>> vect;
        if(n==0)
            return vect;
        
        sort(nums.begin(),nums.end());
        
        if(nums[0]>0 or nums[n-1]<0)
            return vect;
        
        for(int i=0;i+1<n;i++){
            
            int start = i+1, end = n - 1;
            int sum = 0;
            while(start<end){
                sum = nums[i]+nums[start]+nums[end];
                if(sum>0){
                    end--;
                } else if(sum<0){
                    start++;
                } else {
                    vect.push_back({nums[i],nums[start],nums[end]});
                    while(start+1<n and nums[start]==nums[start+1])
                        start++;
                    while(end>0 and nums[end]==nums[end-1])
                        end--;
                    start++;end--;
                }
            }
            while(i+1<n and nums[i]==nums[i+1])
                i++;
        }
        return vect;
    }
};

32. Trapping Rain Water 

class Solution {
public:
    int trap(vector<int>& height) {
        int sum=0;
        int n = height.size();
        if(n<3)
            return 0;
        for(int i=1;i<n-1;i++){
            int left=0,right=0;
            
            for(int j=0;j<i;j++)
                left=max(left,height[j]);
            
            for(int j=n-1;j>i;j--)
                right=max(right,height[j]);
            int x = max(0,min(left,right)-height[i]);
            sum+=x;
        }
        return sum;
    }
};


class Solution {
public:
    int trap(vector<int>& height) {
        int sum=0;
        int n = height.size();
        if(n<3)
            return 0;
        vector<int> left(n,0), right(n,0);
        left[0]=height[0];
        right[n-1]=height[n-1];
        for(int i=1;i<n;i++)
            left[i]=max(left[i-1],height[i]);
        
        for(int i=n-2;i>=0;i--){
            right[i]=max(right[i+1],height[i]);
        }
        for(auto x:left)
            cout<<x<<" ";
        cout<<endl;
        for(auto x:right)
            cout<<x<<" ";
        cout<<endl;
        
        for(int i=1;i<n-1;i++){
            int x = min(left[i],right[i])-height[i];
            sum+=x;
        }
        return sum;
    }
};


33. Remove Duplicate from Sorted Array 

class Solution {
    public:
    int removeDuplicates(int A[], int n) {
        if(n < 2) return n;
        int id = 1;
        for(int i = 1; i < n; ++i) 
            if(A[i] != A[i-1]) A[id++] = A[i];
        return id;
    }
};

34. Max consecutive ones

class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int count = 0; 
        int ans = count; 
        for(int i=0; i<nums.size(); i++) {
            if(nums[i]!=1) {
                count = 0; 
            }
            else {
                count++; 
            }
            ans = max(ans, count); //chooses the maximum of all consecutive ones
        }
        return ans; 
    }
};

35. Partition Equal Subset Sum

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum=0;
        for(auto x:nums)
            sum+=x;
        if(sum&1)
            return false;
        return partition(nums,sum/2);
    }
    bool partition(vector<int>& nums, int tar){
        int n = nums.size();
        vector<vector<bool>> dp(n+1,vector<bool>(tar+1,false));
        for(int i=0;i<n;i++)
            dp[i][0]=true;
        for(int i=1;i<=tar;i++)
            dp[0][i]=false;
        for(int i=1;i<n+1;i++){
            for(int j=1;j<=tar;j++){
                dp[i][j]=dp[i-1][j];
                if(j>=nums[i-1])
                    dp[i][j]=dp[i][j]||dp[i-1][j-nums[i-1]];
            }
        }
        return dp[n][tar];
    }
};

36.  Subsets II

class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        int n = nums.size();
        set<vector<int>> st;
        vector<vector<int>> vect;
        sort(nums.begin(),nums.end());
        for(int i=0;i<(1<<n);i++){
            vector<int> v;
            for(int j=0;j<n;j++){
                if((i&(1<<j))!=0){
                    v.push_back(nums[j]);
                }
            }
            vect.push_back(v);
        }
        for(auto x:vect){
            st.insert(x);
        }
        vector<vector<int>> ve;
        int i=0;
        for(auto x:st){
            ve.push_back(x);
        }
        return ve;
    }
};

37. Palindrome Partitioning 

class Solution {
    vector<vector<string>> res;
    
    bool isPalindrome(string str){
        if(str.length()==1)
            return true;
        for(int i=0;i<str.length()/2;i++){
            if(str[i]!=str[str.length()-1-i])
                return false;
        }
        return true;
    }
    
    bool palindromePartitioning(vector<string>& store, int indx, string s){
        if(indx==s.length()){
            res.push_back(store);
            return true;
        }
        string temp;
        for(int i=indx;i<s.length();i++){
            temp.push_back(s[i]);
            if(isPalindrome(temp)){
                cout<<temp<<" ";
                store.push_back(temp);
                palindromePartitioning(store,i+1,s);
                    // return true;
                store.pop_back();
            }
        }
        return false;
    }
public:
    vector<vector<string>> partition(string s) {
        vector<string> store;
        palindromePartitioning(store,0,s);
        return res;
    }
};

38. Print All Permutation of Given Array/String 

Time Complexity : (n*n!)

#include <bits/stdc++.h>
using namespace std;

void permute(string a, int l, int r)
{
	// Base case
	if (l == r)
		cout<<a<<endl;
	else
	{
		// Permutations made
		for (int i = l; i <= r; i++)
		{

			// Swapping done
			swap(a[l], a[i]);

			// Recursion called
			permute(a, l+1, r);

			//backtrack
			swap(a[l], a[i]);
		}
	}
}


int main()
{
	string str = "ABC";
	int n = str.size();
	permute(str, 0, n-1);
	return 0;
}

39. N-Queen Problems 

class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string> > res;
        
        vector<string> Queens(n,string(n,'.'));  // queens
        
        solve(res,Queens,0,n);
        
        return res;
    }
private:
    void solve(vector<vector<string> >& res, vector<string>& Queens, int row, int n){
        if(row==n){
            res.push_back(Queens);
            return ;
        }
        for(int col=0;col<n;col++){
            if(isValid(Queens,row,col,n)){
                Queens[row][col]='Q';
                solve(res,Queens,row+1,n);
                Queens[row][col]='.';
            }
        }
    }
    
    bool isValid(vector<string>& Queens, int row, int col, int n){
        
        for(int i=0;i<row;i++){            //  taking column
            if(Queens[i][col]=='Q')
                return false;
        }
        for(int i=row-1,j=col-1;i>=0 and j>=0;i--,j--){         // taking 135'
            if(Queens[i][j]=='Q')
                return false;
        }
        for(int i=row-1,j=col+1;i>=0 and j<n;j++,i--){          // taking 45'
            if(Queens[i][j]=='Q')
                return false;
        }
        return true;
    }
};

40. Sudoko solver

class Solution {
    
    bool isSafe(vector<vector<char>>& board, int i, int j, char ch){
        
        // check j-th column
        for(int k=0;k<9;k++)
            if(board[k][j]==ch)
                return false;
        
        // check i-th row
        for(int k=0;k<9;k++){
            if(board[i][k]==ch)
                return false;
        }
        
        // check 3*3 grid
        int row = (i/3)*3;
        int col = (j/3)*3;
        for(int k=row;k<row+3;k++){
            for(int l = col;l<col+3;l++){
                if(board[k][l]==ch)
                    return false;
            }
        }
        
        // else return true
        return true;
    }
    
    bool sudokoSolver(vector<vector<char>>& board, int i, int j){
        
        cout<<i<<" "<<j<<endl;
        // if reach end of row 9
        if(i==9 )
            return true;
        
        // if reach out of boundary
        if(j==9)
            return sudokoSolver(board,i+1,0);
        
        // if cell is already filled
        if(board[i][j]!='.')
            return sudokoSolver(board,i,j+1);
                
        // if not filled check the cell and filled
        for(char ch = '1'; ch<='9';ch++){
            if(isSafe(board,i,j,ch)){
                board[i][j]=ch;
                if(sudokoSolver(board,i,j+1))
                    return true;
            }
        }
        board[i][j]='.';
        return false;
    }
    
public:
    void solveSudoku(vector<vector<char>>& board) {
        sudokoSolver(board,0,0);   
    }
};

41. N-th root of an integer (use binary search) (square root, cube root, ..)


#include <bits/stdc++.h>
using namespace std;

void findNthRoot(double x, int n)
{

	// Initialize boundary values
	double low, high;
	if (x >= 0 and x <= 1)
	{
		low = x;
		high = 1;
	}
	else
	{
		low = 1;
		high = x;
	}

	// Used for taking approximations
	// of the answer
	double epsilon = 0.00000001;

	// Do binary search
	double guess = (low + high) / 2;
	while (abs((pow(guess, n)) - x) >= epsilon)
	{
		if (pow(guess, n) > x)
		{
			high = guess;
		}
		else
		{
			low = guess;
		}
		guess = (low + high) / 2;
	}

	cout << fixed << setprecision(16) << guess;
}

// Driver code
int main()
{
	double x = 5;
	int n = 2;
	findNthRoot(x, n);
}

42. Single Element in a Sorted Array/ Find the element that appears once in sorted array, and rest element appears twice (Binary search) 


class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int left=0, right=nums.size()-1,mid;
        if(nums.size()==1)
            return nums[0];
        while(left<right){
             mid = (left+right)/2;
            if(nums[mid]==nums[mid+1]){
                if((mid-left+1)%2){
                    left = mid; 
                } else {
                    right = mid-1;
                }
            } else if(nums[mid]==nums[mid-1]){
                if((right-mid)%2){
                    left = mid+1;
                } else {
                    right = mid;
                }
            }
            else 
                return nums[mid];
        }
       
        return nums[left];
    }
};

43. 










Rotting Oranges (using BFS)

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        
        int fresh = 0, rotten = 0;
        queue<pair<int,int>> q;
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    grid[i][j]=-2;
                    fresh++;
                }
                if(grid[i][j]==2){
                    grid[i][j]=-1;
                    q.push({i+1,j});q.push({i-1,j}); q.push({i,j+1}); q.push({i,j-1});
                    rotten++;
                }
            }
        }
        if(fresh==0)
            return 0;
        if(rotten==0)
            return -1;
        
        vector<vector<bool>> vis(n+1, vector<bool>(m+1,false));
        int steps = 0;
        
        while(!(q.empty())){
            steps++;
            int sz = q.size();
            for(int i=0;i<sz;i++){
                int fir = q.front().first;
                int sec = q.front().second;
                q.pop();
                if(fir>=0 and fir<n and sec>=0 and sec<m and !vis[fir][sec] and grid[fir][sec]==-2){
                    grid[fir][sec]=steps;
                    vis[fir][sec]=true;
                    q.push({fir,sec+1}); q.push({fir,sec-1}); q.push({fir+1,sec}); q.push({fir-1,sec});
                }
            }
        }
        int mx=0;
        fresh=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==-2)
                    fresh++;
                mx = max(mx,grid[i][j]);
            }
        }
        
        if(fresh)
            return -1;
        return mx;
        
    }
};



Majority Element (>N/3 times) 
4-sum
Largest Subarray with 0 sum
Count number of subarrays with given XOR
Flattening of a LinkedList 
Clone a Linked List with random and next pointer
N meeting in one room 
Minimum number of platforms required for a railway
Job sequencing Problem
Fractional Knapsack Problem
Greedy algorithm to find minimum number of coins
Activity Selection (it is same as N meeting in one room) 
Combination Sum-I 
Combintion Sum - II 
Permutation Sequence
M coloring Problem 
Rat in a Maze 
Word Break (print all ways)
Matrix Median
Search in Rotated Sorted Array
Median of 2 sorted arrays   