1. Decode Ways

class Solution {
public:
    int numDecodings(string s) {
        int n = s.length();
        
        vector<int> dp(n+1,0);
        if(s[0]=='0'){
            dp[0]=0;
        }
        else 
            dp[0]=1;
        for(int i=1;i<n;i++){
            if(s[i]=='0' and s[i-1]=='0'){
                dp[i]=0;
            }
            if(s[i]=='0' and s[i-1]!='0'){
                string temp ;
                temp.push_back(s[i-1]);
                temp.push_back(s[i]);
                if(temp<"27"){
                    dp[i] = (i>=2 ? dp[i-2]:1);
                }
                else {
                    dp[i]=0;
                }
            }
            if(s[i]!='0' and s[i-1]=='0'){
                dp[i]+=dp[i-1];
            }
            if(s[i]!='0' and s[i-1]!='0'){
                string temp ;
                temp.push_back(s[i-1]);
                temp.push_back(s[i]);
                if(temp<"27"){
                    dp[i] = dp[i-1] + (i>=2 ? dp[i-2]:0);
                } else {
                    dp[i] += dp[i-1];
                }
            }
        }
        return dp[n-1];
    }
};


2. Jump Game - 4 

class Solution {
public:
    int maxResult(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> dp(n,0);
        dp[n-1]=nums[n-1];
        for(int i=n-2;i>=0;i--){
            int mx = INT_MIN;
            for(int j=1; j<=k and i+j<n; j++){
                mx = max(dp[i+j],mx) ;
            }
            dp[i]=mx+nums[i];
        }
        return dp[0];
    }
};

3. Jump Game - 6

class Solution {
public:
    int maxResult(vector<int>& nums, int k) {
        int n = nums.size();
       
        priority_queue<pair<int,int>> pq;
        
        pq.push({nums[n-1],n-1});
        
        for(int i=n-2;i>=0;i--){
            while(pq.top().second>i+k){       // check the index if it greater than i+k then remove from list.
                pq.pop();
            }
            int cur = pq.top().first + nums[i];
            pq.push({cur,i});
            if(i==0)                          // if reach to first index return the output.
              return cur;
        }
        
        return pq.top().first;
    }
};


4. Paint House 

int Solution::solve(vector<vector<int> > &nums) {
    int n = nums.size();
    int dp[n+1][3];
    // memset(dp,0,sizeof dp);
    dp[0][0] = nums[0][0];
    dp[0][1] = nums[0][1];
    dp[0][2] = nums[0][2];
    for(int i=1;i<n;i++){
        dp[i][0] = min(dp[i-1][1],dp[i-1][2]) + nums[i][0];
        dp[i][1] = min(dp[i-1][0],dp[i-1][2]) + nums[i][1];
        dp[i][2] = min(dp[i-1][0],dp[i-1][1]) + nums[i][2];
    }
    return min(dp[n-1][0],min(dp[n-1][1],dp[n-1][2]));
}


5. Chain Of Pairs (variant of LIS)

int Solution::solve(vector<vector<int> > &nums) {
    int n = nums.size();
    vector<pair<int,int>> vp;
    vector<int> dp(n,1);
    vp.push_back({nums[0][0],nums[0][1]});
    int ans=0;
    for(int i=1;i<n;i++){
        for(int j=0;j<i;j++){
            if(nums[i][0]>nums[j][1]){
                dp[i] = max(dp[j]+1,dp[i]);
            }
        }
        ans = max(ans,dp[i]);
    }
    return ans;
}