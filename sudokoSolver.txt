class Solution {
    
    bool isSafe(vector<vector<char>>& board, int i, int j, char ch){
        
        // check j-th column
        for(int k=0;k<9;k++)
            if(board[k][j]==ch)
                return false;
        
        // check i-th row
        for(int k=0;k<9;k++){
            if(board[i][k]==ch)
                return false;
        }
        
        // check 3*3 grid
        int row = (i/3)*3;
        int col = (j/3)*3;
        for(int k=row;k<row+3;k++){
            for(int l = col;l<col+3;l++){
                if(board[k][l]==ch)
                    return false;
            }
        }
        
        // else return true
        return true;
    }
    
    bool sudokoSolver(vector<vector<char>>& board, int i, int j){
        
        cout<<i<<" "<<j<<endl;
        // if reach end of row 9
        if(i==9 )
            return true;
        
        // if reach out of boundary
        if(j==9)
            return sudokoSolver(board,i+1,0);
        
        // if cell is already filled
        if(board[i][j]!='.')
            return sudokoSolver(board,i,j+1);
                
        // if not filled check the cell and filled
        for(char ch = '1'; ch<='9';ch++){
            if(isSafe(board,i,j,ch)){
                board[i][j]=ch;
                if(sudokoSolver(board,i,j+1))
                    return true;
            }
        }
        board[i][j]='.';
        return false;
    }
    
public:
    void solveSudoku(vector<vector<char>>& board) {
        sudokoSolver(board,0,0);   
    }
};